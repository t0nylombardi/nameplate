module NamePlate
  module Colors
    type color = Array[Integer]
    self.@registry: untyped

    # Lazily build registry from all subclasses of Palette
    def self.registry: () -> untyped

    def self.for: (untyped username) -> untyped

    class Palette
      @colors: Array[color]
      attr_reader colors: Array[color]

      # Allow optional injection; otherwise subclasses pull from a constant.
      def initialize: (?Array[color]) -> void

      def self.key: () -> Symbol

      # Make Palette indexable (delegates to @colors in Ruby)
      def []: (Integer index) -> color
      def size: () -> Integer

      # Picks one RGB triplet for the username
      def pick: (String username) -> color

      # Validate a custom palette of colors.
      #
      # @param [Array[Integer]] palette The custom palette of colors.
      # @return [Boolean] Whether the custom palette is valid.
      def self.valid_custom_palette?: (untyped palette) -> (false | true)

      private
      def hash_index: (String username) -> Integer
    end
  end
end
